AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Description: >
  Creates the infrastructure to host SEE SIM Smackdown
      - S3 Bucket
      - Route53
      - DynamoDB
      - CloudFront distribution
      - VPC
      - Public Subnet
      - Private Subnet
      - EC2 (VPN)
      - EC2 (RTI)
      - API Gateways
      - Lambdas

Metadata:
  AWS::ServerlessRepo::Application:
    Name: see-sim-smackdown-aws-infrastructure
    SemanticVersion: 0.0.0

Parameters:
  ProjectName:
    Type: String
    Default: see-sim-smackdown
  DynamoDBTableName:
    Type: String
    Default: see-sim-smackdown-users
  VpcCidr:
    Type: String
    Description: CIDR block for the VPC
    Default: '10.22.0.0/16'
    MinLength: '9'
    MaxLength: '18'
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid CIDR range of the form x.x.x.x/x.
  PublicSubnetCidr:
    Type: String
    Description: CIDR block for the public subnet
    MinLength: '9'
    MaxLength: '18'
    Default: '10.22.0.0/24'
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid CIDR range of the form x.x.x.x/x.
  PrivateSubnetCidr:
    Type: String
    Description: CIDR block for the private subnet
    MinLength: '9'
    MaxLength: '18'
    Default: '10.22.1.0/24'
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid CIDR range of the form x.x.x.x/x.
  DomainName:
    Type: String
    Description: The domain name of the app
    Default: simulationexplorationexperience.com
  ApiDomainName:
    Type: String
    Description: The domain name of the API
    Default: api.simulationexplorationexperience.com
  VPNDomainName:
    Type: String
    Description: The domain name of the VPN
    Default: vpn.simulationexplorationexperience.com

Resources:
  Route53HostedZone:
    Type: 'AWS::Route53::HostedZone'
    Properties:
      Name: !Ref DomainName
      HostedZoneConfig:
        Comment: !Sub 'Hosted zone for ${DomainName}'

  Route53Record:
    Type: 'AWS::Route53::RecordSetGroup'
    Properties:
      HostedZoneId: !Ref Route53HostedZone
      RecordSets:
        - Name: !Ref DomainName
          Type: A
          AliasTarget:
            HostedZoneId: Z2FDTNDATAQYW2
            DNSName: !GetAtt CloudFrontDistribution.DomainName

  Route53RecordApi:
    Type: 'AWS::Route53::RecordSetGroup'
    Properties:
      HostedZoneId: !Ref Route53HostedZone
      RecordSets:
        - Name: !Ref ApiDomainName
          Type: A
          AliasTarget:
            HostedZoneId: Z2FDTNDATAQYW2
            DNSName: !GetAtt ApiGatewayApiCustomDomain.DistributionDomainName

  Route53RecordVpn:
    Type: 'AWS::Route53::RecordSetGroup'
    Properties:
      HostedZoneId: !Ref Route53HostedZone
      RecordSets:
        - Name: !Ref VPNDomainName
          Type: A
          AliasTarget:
            HostedZoneId: Z2FDTNDATAQYW2
            DNSName: !GetAtt ApiGatewayVpnCustomDomain.DistributionDomainName

  SSLCertificate:
    Type: 'AWS::CertificateManager::Certificate'
    Properties:
      DomainName: !Ref DomainName
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !Ref DomainName
          HostedZoneId: !Ref Route53HostedZone

  SSLCertificateWildcard:
    Type: 'AWS::CertificateManager::Certificate'
    Properties:
      DomainName: !Sub '*.${DomainName}'
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !Ref DomainName
          HostedZoneId: !Ref Route53HostedZone

  S3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref ProjectName
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: 'AES256'

  BucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      PolicyDocument:
        Id: SEESimSmackdownCloudFrontS3AccessPolicy
        Version: 2012-10-17
        Statement:
          - Sid: PolicyForCloudFrontPrivateContent
            Effect: Allow
            Principal:
              CanonicalUser: !GetAtt CFOriginAccessIdentity.S3CanonicalUserId
            Action: 's3:GetObject*'
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref S3Bucket
                - /*
      Bucket: !Ref S3Bucket

  CloudFrontDistribution:
    Type: 'AWS::CloudFront::Distribution'
    DependsOn:
      - CFOriginAccessIdentity
    Properties:
      DistributionConfig:
        Aliases:
          - !Ref DomainName
        Origins:
          - DomainName: !GetAtt S3Bucket.RegionalDomainName
            Id: SEESimSmackdownS3Origin
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${CFOriginAccessIdentity}'
        Enabled: true
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          TargetOriginId: SEESimSmackdownS3Origin
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 # CachingOptimized
          OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf # CORS-S3Origin
          ViewerProtocolPolicy: redirect-to-https
          Compress: true
        PriceClass: PriceClass_All
        CustomErrorResponses:
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
        HttpVersion: http2
        ViewerCertificate:
          AcmCertificateArn: !Ref SSLCertificate
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2019

  CFOriginAccessIdentity:
    Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
    DependsOn:
      - S3Bucket
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub 'access-identity-see-sim-smackdown-spa'

  Network:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: Fn::Join [ "-", [ !Ref ProjectName, "network" ]

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: Fn::Join [ "-", [ !Ref ProjectName, "internet-gateway" ]

  GatewayToInternet:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref Network

  PublicSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Network
      Tags:
        - Key: Name
          Value: Fn::Join [ "-", [ !Ref ProjectName, "public-subnet-route-table" ]

  PublicSubnetRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayToInternet
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Network
      CidrBlock: !Ref PublicSubnetCidr
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Fn::Join [ "-", [ !Ref ProjectName, "public-subnet" ]

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !GetAtt PublicSubnet.SubnetId
      RouteTableId: !Ref PublicSubnetRouteTable

  AZANatGatewayEIP:
    Type: AWS::EC2::EIP
    DependsOn: GatewayToInternet
    Properties:
      Domain: vpc

  AZANatGateway:
    Type: AWS::EC2::NatGateway
    DependsOn: AZANatGatewayEIP
    Properties:
      AllocationId: !GetAtt AZANatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet

  PrivateSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Network
      Tags:
        - Key: Name
          Value: Fn::Join [ "-", [ !Ref ProjectName, "private-subnet-route-table" ]

  PrivateSubnetRoute:
    Type: AWS::EC2::Route
    DependsOn: AZANatGateway
    Properties:
      RouteTableId: !Ref PrivateSubnetRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref AZANatGateway

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Network
      CidrBlock: !Ref PrivateSubnetCidr
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Fn::Join [ "-", [ !Ref ProjectName, "private-subnet" ]

  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet
      RouteTableId: !Ref PrivateSubnetRouteTable

  VPNServer:
    Type: AWS::EC2::Instance
    Properties:
      DisableApiTermination: True
      ImageId: ami-0e2b332e63c56bcb5 # Ubuntu Server 22.04 LTS (HVM), SSD Volume Type (64-bit (Arm))
      InstanceType: t4g.medium
      KeyName: root # https://us-east-1.console.aws.amazon.com/ec2/home?region=us-east-1#KeyPairs:
      SecurityGroupIds:
        - !GetAtt VpnSecurityGroup.GroupId
      SubnetId: !GetAtt PublicSubnet.SubnetId
      Tags:
        - Key: 'vpn-server'
          Value: 'vpn-server'
      IamInstanceProfile: !Ref VpnInstanceProfile
      # Source/destination checking
      # Disabled this check
      SourceDestCheck: false

  # OpenVPN Access Server requires access for inbound traffic on TCP 22 (SSH),
  # TCP 943 and 443 (web interface), TCP 953 (if you use clustering), and UDP 1194
  # (OpenVPN UDP port for client communication).
  VpnSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Allow udp 1194 and SSH inbound and outbound traffic'
      VpcId: !Ref Network
      SecurityGroupIngress:
        - IpProtocol: udp
          FromPort: 1194
          ToPort: 1194
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: !Ref PrivateSubnetCidr
        - IpProtocol: udp
          FromPort: 0
          ToPort: 65535
          CidrIp: !Ref PrivateSubnetCidr

  VpnInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref VpnInstanceRole

  VpnInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: VpnDynamoDBPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                Resource: '*'

  RTIServer:
    Type: AWS::EC2::Instance
    Properties:
      DisableApiTermination: True
      ImageId: ami-0574da719dca65348 # Ubuntu Server 22.04 LTS (HVM), SSD Volume Type (64-bit (Arm))
      InstanceType: t3.medium
      KeyName: root # https://us-east-1.console.aws.amazon.com/ec2/home?region=us-east-1#KeyPairs:
      SecurityGroupIds:
        - !GetAtt RTISecurityGroup.GroupId
      SubnetId: !GetAtt PrivateSubnet.SubnetId
      Tags:
        - Key: 'rti-server'
          Value: 'rti-server'

  # Pitch pRTI uses tcp port 8989
  RTISecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Allow tcp 8989 and SSH inbound and outbound traffic'
      VpcId: !Ref Network
      SecurityGroupIngress:
        - IpProtocol: '-1'
          CidrIp: 0.0.0.0/0

  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      TableName: !Ref DynamoDBTableName

  ApiGatewayApiCustomDomain:
    Type: AWS::ApiGateway::DomainName
    Properties:
      DomainName: !Ref ApiDomainName
      EndpointConfiguration:
        Types:
          - EDGE
      CertificateArn: !Ref SSLCertificateWildcard

  ApiGatewayApiBasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      DomainName: !Ref ApiGatewayApiCustomDomain
      BasePath: ''
      RestApiId: !Ref ApiGatewayApi
      Stage: prod

  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      Cors:
        AllowOrigin: "'*'"
        AllowHeaders: "'*'"
        AllowMethods: "'POST,GET,OPTIONS'"

  ApiGatewayVpnCustomDomain:
    Type: AWS::ApiGateway::DomainName
    Properties:
      DomainName: !Ref VPNDomainName
      EndpointConfiguration:
        Types:
          - EDGE
      CertificateArn: !Ref SSLCertificateWildcard

  ApiGatewayVpnBasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      DomainName: !Ref ApiGatewayVpnCustomDomain
      BasePath: ''
      RestApiId: !Ref ApiGatewayVpn
      Stage: prod

  ApiGatewayVpn:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod

  UserRegistrationLambda:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 1024
      Timeout: 10
      CodeUri: src/
      Handler: user-registration.handler
      Runtime: nodejs14.x
      Role: !GetAtt ApiLambdaRole.Arn
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref DynamoDBTableName
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /register
            Method: post
            RestApiId: !Ref ApiGatewayApi
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: 'es2020'
        Sourcemap: true
        EntryPoints:
          - user-registration.ts

  UserLoginLambda:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 1024
      Timeout: 10
      CodeUri: src/
      Handler: user-login.handler
      Runtime: nodejs14.x
      Role: !GetAtt ApiLambdaRole.Arn
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref DynamoDBTableName
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /login
            Method: post
            RestApiId: !Ref ApiGatewayApi
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: 'es2020'
        Sourcemap: true
        EntryPoints:
          - user-login.ts

  UserPasswordResetStartLambda:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 1024
      Timeout: 10
      CodeUri: src/
      Handler: user-password-reset-start.handler
      Runtime: nodejs14.x
      Role: !GetAtt ApiLambdaRole.Arn
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref DynamoDBTableName
          SENDGRID_API_KEY: '{{resolve:secretsmanager:SENDGRID_API_KEY:SecretString:SENDGRID_API_KEY}}'
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /password-reset-start
            Method: post
            RestApiId: !Ref ApiGatewayApi
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: 'es2020'
        Sourcemap: true
        EntryPoints:
          - user-password-reset-start.ts

  UserPasswordResetFinishLambda:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 1024
      Timeout: 10
      CodeUri: src/
      Handler: user-password-reset-finish.handler
      Runtime: nodejs14.x
      Role: !GetAtt ApiLambdaRole.Arn
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref DynamoDBTableName
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /password-reset-finish
            Method: post
            RestApiId: !Ref ApiGatewayApi
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: 'es2020'
        Sourcemap: true
        EntryPoints:
          - user-password-reset-finish.ts

  # Lambda function living on /auth/GetUserlogin
  OpenVPNGetUserLogin:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 1024
      Timeout: 10
      CodeUri: src/
      Handler: openvpn-auth-get-user-login.handler
      Runtime: nodejs14.x
      Role: !GetAtt ApiLambdaRole.Arn
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref DynamoDBTableName
          OPENVPN_CLIENT_CERT: '{{resolve:secretsmanager:OPENVPN_CLIENT_CERT}}'
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: ANY
            RestApiId: !Ref ApiGatewayVpn
            RequestParameters:
              - method.request.header.Authorization
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: 'es2020'
        Sourcemap: true
        EntryPoints:
          - openvpn-auth-get-user-login.ts

  ApiLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub api-lambda-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambdaExecute
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
